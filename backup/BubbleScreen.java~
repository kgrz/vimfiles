package com.mygdx.gdx2;

import java.util.ArrayList;
import java.util.List;


import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.viewport.StretchViewport;
import com.badlogic.gdx.utils.viewport.Viewport;

public class BubbleScreen implements Screen,InputProcessor{

        public List<Card> cards= new ArrayList<Card>(); 
	public World world; 
	public Card card; 
	public SpriteBatch batch;
	public OrthographicCamera camera;
  public static int VELOCITYITERATIONS = 8;
  public static int POSITIONITERATIONS = 3;
  public static float TIMESTEP = 1/60f; 
	public Vector3 pointer = new Vector3(0, 0, 0);
	public ShapeRenderer shapeRenderer;
	public GameStage gameStage; 
	public Viewport view ; 

	@Override
	public void show() {
	  world = new World( new Vector2(0,0) , true );
	  card = new Card(); 
	  card.sprite.setSize(1,2);
	  camera = new OrthographicCamera(10,(float)(Gdx.graphics.getHeight() )/ (Gdx.graphics.getWidth())*10);
	  
	  view = new StretchViewport(10,(float)(Gdx.graphics.getHeight() )/ (Gdx.graphics.getWidth())*10, camera);



	  gameStage = new GameStage(this); 

	  batch = new SpriteBatch();

	  Gdx.input.setInputProcessor(gameStage);  
	  
	  shapeRenderer = new ShapeRenderer(); 




	}

	@Override
	public void render(float delta) {
                Gdx.gl.glClearColor(0, 1, 0, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		
		gameStage.draw(); 
		gameStage.act(delta);

	}
	public void run(float delta) {
	        world.step(TIMESTEP, VELOCITYITERATIONS, POSITIONITERATIONS);

		card.sprite.setCenterX(pointer.x) ;
		card.sprite.setCenterY(pointer.y) ;
		//Gdx.app.log("MARTIN", " " + pointer.x + " " + pointer.y);  

		
		batch.setProjectionMatrix(camera.combined);
		batch.begin();
		card.sprite.draw(batch);
		batch.end();
		// TODO Auto-generated method stub


	    shapeRenderer.setProjectionMatrix(camera.combined);
	    shapeRenderer.begin(ShapeType.Line);
	    shapeRenderer.setColor(new Color (1,0,0,1) );
		shapeRenderer.line(-10, 0, 10, 0 )  ;
		shapeRenderer.line(0, -10,0, 10)  ;
	    shapeRenderer.end();


	}


	@Override
	public void resize(int arg0, int arg1) {
          camera.position.set(arg0, arg0, 0);
          gameStage.getViewport().update(arg0, arg0,true);

		// TODO Auto-generated method stub

	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub

	}

	@Override
	public void dispose() {
	}

	@Override
	public void hide() {
	}

	@Override
	public void pause() {
	}


	@Override
	public boolean keyDown(int arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyTyped(char arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyUp(int arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int arg0, int arg1) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean scrolled(int arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDown(int arg0, int arg1, int arg2, int arg3) {
		Gdx.app.log("MARTIN", " " + pointer.x + " " + pointer.y);  
		pointer = camera.unproject(new Vector3(arg0,arg1,0));
		camera.position.set(pointer) ;
		camera.update(); 

		gameStage.getViewport().update(Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), false);
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDragged(int arg0, int arg1, int arg2) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchUp(int arg0, int arg1, int arg2, int arg3) {
		// TODO Auto-generated method stub
		return false;
	}
}
