# Init, Variables
  # If not running interactively, don't do anything
  [ -z "$PS1" ] && return

  # Goto home
  if [ "$PWD" == / ] ; then cd "$HOME" || : ; fi

  # Set OS
  export h="$HOME"
  # shellcheck disable=SC2088
  uname=$(uname -a)
  uname=${uname,,}
  case $uname in
    *"android"*)
      export os="termux"
      export v="$HOME/.vim"
      ;;
    *"linux"*)
      export os="unix"
      export v="$HOME/.vim"
      ;;
    *"mingw"*)
      export os="windows"
      export v="$HOME/vimfiles"
      ;;
  esac

  # Set USER
  [ -z "$USER" ] && command -v whoami > /dev/null && USER=$(whoami) && export USER


# Path
  # Save
  export path_save=$PATH
  export PATH=""
  # Windows fast
  export PATH="$PATH:/c/Program Files/Vim/vim82"
  # My script
  export PATH=$PATH:$HOME/.vim/bin
  export PATH=$PATH:$HOME/Bin
  # Node after npm config set prefix ~/.npm
  export PATH=$PATH:$HOME/.npm/bin
  # Perl6
  export RAKUDOLIB=$HOME/.raku
  export PATH=$PATH:$HOME/Program/Raku/Doc/bin
  export PATH=$PATH:$HOME/Program/Raku/Repo/install/bin
  export PATH=$PATH:$HOME/Program/Raku/Repo/install/share/perl6/site/bin
  export PATH=$PATH:$HOME/Program/Raku/Z/bin
  export PATH=$PATH:$HOME/.raku/share/perl6/site/bin
  export PATH=$PATH:$HOME/.raku/bin
  # Python
  #export PATH=$PATH:$HOME/Program/Conda/bin
  export PATH=$PATH:$HOME/.local/usr/local/bin
  export PATH=$PATH:$HOME/.local/bin
  # Rust
  export PATH=$PATH:$HOME/.cargo/bin
  # Android sdk
  export PATH=$PATH:$HOME/Program/Android/Sdk/Tools/sdk-tools-linux-4333796/tools
  export PATH=$PATH:$HOME/Program/Android/Sdk/Tools/sdk-tools-linux-4333796/tools/bin
  export PATH=$PATH:$HOME/Program/Eclipse/eclipse
  export ANDROID_HOME=$HOME/Program/Android/Sdk/Tools/sdk-tools-linux-4333796
  export ANDROID_SDK=$HOME/Program/Android/Sdk/Tools/sdk-tools-linux-4333796
  # Programs
  export PATH=$PATH:/usr/local/cuda-10.0/bin
  export PATH=$PATH:$HOME/Program/Metapixel/metapixel
  # Readd
  export PATH=$PATH:$path_save

  # Lib
  export LD_LIBRARY_PATH=$HOME/Bin:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=$HOME/Program/Gecode:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu:$LD_LIBRARY_PATH
  export NDK=$HOME/Program/Ndk/Current

  # shellcheck source=/home/tourneboeuf/.fzf.bash
  [ -f "$HOME/.fzf.bash" ] && source "$HOME/.fzf.bash"

# Execute tmux
  if command -v tmux &> /dev/null && [ -n "$PS1" ] \
      && [ -z "$TMUX" ] \
      && [[ ! "$TERM" =~ screen ]]  && [[ ! "$TERM" =~ "screen-256color" ]] \
      && [[ ! "$TERM" =~ tmux ]] && [[ ! "$TERM" =~ "tmux-256color" ]] \
      ; then
    exec env TERM=tmux-256color tmux
  fi


# Unknown command callback (tip: install bash-completion on tmux)
  function command_not_found_handle {
    # If starting with g : git
    if [ "${1:0:1}" == "g" ]; then
      # shellcheck disable=SC2086
      git "${1:1}" $2
    # If any shit, echo bash default errmsg
    else
      echo "bash(rc): $1: command not found"
    fi
  }


# Preferences
  # Enable directory with $
  shopt -s direxpand
  # Avoid c-s freezing
  stty -ixon

  # Vi as default `git commit`
  export EDITOR='vim'
  # Check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # French characters
  stty cs8 -istrip -parenb
  bind 'set convert-meta off'
  bind 'set meta-flag on'
  bind 'set output-meta on'

  # History
  # append instead of overwrite
  shopt -s histappend
  export HISTSIZE=100000
  export HISTFILESIZE=100000
  export HISTCONTROL=ignoredups:ignorespace


# Prompt
  # Save history after each executed line
  export PROMPT_COMMAND+='history -a;'

  # PS1
  function parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/' ;
  }
  export -f parse_git_branch
  function parse_title() {
    host=$(hostname)
    # hsot
    if [ "$host" = "tourny" ]; then
      res=''
    else
      res="<$host>:   "
    fi
    res+=$(dirs +0)
    echo "$res"
  }
  export -f parse_title

  # Title: Host: CD
  PS1='\[\e]0;\]`parse_title`\007'
  # CD (green)
  PS1+='\[\e[32m\]\w'
  # Git Branch (yellow)
  PS1+='\[\e[33m\]'
  PS1+='`parse_git_branch`'
  PS1+='\[\e[00m\]'
  # New line
  PS1+='\n$ '
  export PS1


# Head
  clear
  # Nowrap
  printf '\e[?7l'
  cat << '  EOF'
                             \  |  /
                              \_|_/
                  /|\     ____/   \____
                 / | \        \___/
                /  |  \       / | \
               /___|___\     /  |  \
              _____|_____
              \_________/
   ~~^^~~^~^~~^^~^^^^~~~~^~^~^~^^^^^^^

        |\   \\\\__     o
        | \_/    o_\    o
        >  _  (( <_  oo
        | / \__+___/
        |/     |/

  EOF
  # Reset wrap
  printf '\e[?7h'


# Languages
  # Perl
  export PERL5LIB="$PERL5LIB:$HOME/Program/Perl/Lib/lib/perl5/x86_64-linux-gnu-thread-multi"
  export PERL5LIB="$PERL5LIB:$HOME/Software/Perl/Lib:$HOME/Program/Komodo/Komodo-PerlRemoteDebugging-8.0.2-78971-linux-x86_64"
  export PERL5DB="BEGIN { require q($PERL5LIB/perl5db.pl)}"
  export PERLDB_OPTS="RemotePort=localhost:9000"
  export DBGP_IDEKEY="whatever"

  # Git
  # Android
  if [ "$os" = "termux" ] ; then
    export GIT_AUTHOR_NAME=tinmux
    export GIT_AUTHOR_EMAIL=tin@ter.mux
  # Windows
  elif [ "$os" = "windows" ] ; then
    export GIT_AUTHOR_NAME=tinwin
    export GIT_AUTHOR_EMAIL=tin@win.dows
  # Linux
  else
    if [ "$USER" = "tourneboeuf" ] ; then
      export GIT_AUTHOR_NAME=Tinmarino
      export GIT_AUTHOR_EMAIL=tinmarino@gmail.com
    elif [ "$USER" = "almamgr" ] ; then
      export GIT_AUTHOR_NAME=tinhat
      export GIT_AUTHOR_EMAIL=tin@red.hat
    else
      export GIT_AUTHOR_NAME=$USER
      export GIT_AUTHOR_EMAIL=$USER@his.pc
    fi
  fi
  export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
  export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"


# Include, Source, Extension
  # Alias
  if [ -f "$HOME/.bash_aliases.sh" ]; then
    # shellcheck source=/home/tourneboeuf/.bash_aliases.sh
    source "$HOME/.bash_aliases.sh"
  fi

  # Bash completion
  if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
      . /etc/bash_completion
  fi

  # Tmux completion
  # shellcheck source=/home/tourneboeuf/.vim/bin/_tinrc-tmux-completion.sh
  [ -f "$v/bin/_tinrc-tmux-completion.sh" ] && source "$v/bin/_tinrc-tmux-completion.sh"

  # Pip bash completion start
  _pip_completion()
  {
      mapfile -t COMPREPLY < <( \
        COMP_WORDS="${COMP_WORDS[*]}" \
        COMP_CWORD=$COMP_CWORD \
        PIP_AUTO_COMPLETE=1 $1 2>/dev/null )
  }
  complete -o default -F _pip_completion pip
  # pip bash completion end

  # Fzf functions
  # export FZF_DEFAULT_COMMAND="fdfind --type file --color=never"
  # export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
  fzf_cmds=(bash -c "
    vi -NEs +'redir>>/dev/stdout | packadd fzf.vim'
            +'echo join(fzf#vim#_recent_files(), \"\\n\")'
            +'redir END | q'
    rg --color never --files \".\";
    rg --color never --files \"$HOME\";
    rg --color never --files \"$v\";")
  export FZF_DEFAULT_COMMAND="${fzf_cmds[*]}"
  fzf_opts=(
    # Enable exact match
    #--exact
    # Multi Selection
    --multi
    --reverse
    "--preview-window=right:60%" --height 100%
    --preview \"bat "--style=numbers" "--color=always" --line-range :500 {}\"
    --bind ?:toggle-preview
    --bind ctrl-space:toggle-preview
    --bind ctrl-j:down
    --bind ctrl-k:up
    --bind ctrl-u:half-page-up
    --bind ctrl-d:half-page-down
    --bind ctrl-s:toggle-sort
    #--bind alt-u:preview-half-page-up
    #--bind alt-d:preview-half-page-down
    #--bind ctrl-y:preview-up
    #--bind ctrl-e:preview-down
  )
  export FZF_DEFAULT_OPTS="${fzf_opts[*]}"
  # ForGit plugin
  export FORGIT_LOG_FZF_OPTS="$FZF_DEFAULT_OPTS"
  export FORGIT_DIFF_FZF_OPTS="$FZF_DEFAULT_OPTS"
  export FORGIT_DIFF_FZF_OPTS="$FZF_DEFAULT_OPTS"
  # From: https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings
  export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
  export FZF_CTRL_R_OPTS="--sort --exact --preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
  # shellcheck source=/home/tourneboeuf/.vim/bin/_tinrc-fzf-function.sh
  [ -f "$v/bin/_tinrc-fzf-function.sh" ] && source "$v/bin/_tinrc-fzf-function.sh"
  # shellcheck source=/home/tourneboeuf/Program/ForGit/forgit.plugin.sh
  [ -f "$h/Program/ForGit/forgit.plugin.sh" ] && source "$h/Program/ForGit/forgit.plugin.sh" 


# Bind
  # Enable Readline not waiting for additional input when a key is pressed.
  set keyseq-timeout 10
  bind -x '"\ee":fo'


# Fast
  # man
  export PAGER="vman"
  # complete -cf sudo
  export TEXMFHOME=$HOME/Program/Tlmgr
  # Add "substitute" mnemonic, which the info file left out.
  doc_sed() {
    info sed "Command and Option Index" | \
      sed -n '/\*/s/ s c/ s \(substitute\) c/;s/command[:,].*//p'
  }


function myff() { ffmpeg -i "$1"  -f avi -c:v mpeg4 -b:v 4000k -c:a libmp3lame -b:a 320k  "$2" ; }
function mygif() { ffmpeg  -i "$1" -vf "fps=10,scale=640:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 "$2"; }
function mymp3() { find . -type f -regex '.*/.*\(webm\|mkv\)' -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -vn -c:a libmp3lame -y "${FILE%.*}.mp3";' _ '{}' \; ; }


# vim:sw=2:ts=2:foldignore=:
export PATH="/home/tourneboeuf/Program/GitFuzzy/bin:$PATH"
