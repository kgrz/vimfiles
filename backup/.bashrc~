# ~/.bashrc: executed by bash(2) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples


# goto home 
if [ $PWD == / ] ; then cd ~ ; fi 

# set the title 
export PROMPT_COMMAND='echo -ne "\033]0;${PWD}\007"'


# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace


#dropbox /.dropbox-dist/dropboxd

#HISTORY
  # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
  HISTSIZE=100000
  HISTFILESIZE=100000
  HISTCONTROL=ignoredups:ignorespace
  # don't put duplicate lines in the history. See bash(1) for more options
  export HISTCONTROL=ignoredups
  
  shopt -s histappend
  # append instead of overwrite 
  
  export PROMPT_COMMAND=$PROMPT_COMMAND';history -a'
  # put in history each ex line 




# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac


# for the color of directory
#eval (~/.bash_color)

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

  # my color coming form alvaro
PS1='\[\e[0;32m\][\u@\h \W]\$\[\e[0m\] '

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi


echo '                           \  |  /'
echo '                            \_|_/         '  
echo '                /|\     ____/   \____    '
echo '               / | \        \___/  '
echo '              /  |  \       / | \   '
echo '             /___|___\     /  |  \'
echo '            _____|_____'
echo '            \_________/'
echo ' ~~^^~~^~^~~^^~^^^^~~~~^~^~^~^^^^^^^'
echo ''
echo '      |\   \\\\__     o'
echo '      | \_/    o_\    o          '
echo '      >  _  (( <_  oo             '
echo '      | / \__+___/      '
echo '      |/     |/'

alias monitor='xrandr --output VGA-0 --left-of LVDS'


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases.sh ]; then
    . ~/.bash_aliases.sh
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

## For theli

#~/.dropbox-dist/dropboxd & 
export XPA_METHOD=local  #  for ds9 


# for extraction
#function extract () {
#   if [ -f $1 ] ; then
#       case $1 in
#           *.tar.bz2)   tar xvjf $1    ;;
#           *.tar.gz)    tar xvzf $1    ;;
#           *.bz2)       bunzip2 $1     ;;
#           *.rar)       unrar x $1       ;;
#           *.gz)        gunzip $1      ;;
#           *.tar)       tar xvf $1     ;;
#           *.tbz2)      tar xvjf $1    ;;
#           *.tgz)       tar xvzf $1    ;;
#           *.zip)       unzip $1       ;;
#           *.Z)         uncompress $1  ;;
#           *.7z)        7z x $1        ;;
#           *)           echo "don't know how to extract '$1'..." ;;
#       esac
#   else
#       echo "'$1' is not a valid file!"
#   fi
# }

#PATH
  export PATH="/home2/tourneboeuf/Software/Android/SDK/android-sdk-linux/platform-tools:"$PATH
  export PATH="/home2/tourneboeuf/Software/Android/SDK/android-sdk-linux/tools:"$PATH
  export PATH="/home2/tourneboeuf/Program/Eclipse/eclipse/plugins/org.eclim_2.4.1/bin:"$PATH
  #export PATH="$HOME/Software/Gasgano/bin:"$PATH
  #export PATH=${PATH}:$HOME/Software/Scisoft/bin
  #export PATH=${PATH}:/iraf/iraf/wcstools/bin
  #export PATH=${PATH}:$HOME/Software/THELI/theli/bin/Linux_64
  #export PATH=${PATH}:$HOME/Software/THELI/gui-2.6.0
  #export PATH=/home2/tourneboeuf/Software/jdk1.7.0_45/bin:${PATH}
  #export PATH=/usr/lib/jvm/java-7-oracle/jre/bin:${PATH}
  #export PATH=/usr/local/texlive/2013/bin/x86_64-linux:${PATH}



## EDITOR 
  EDITOR='vim'

### FRENCH CHARACTERS
  stty cs8 -istrip -parenb
  bind 'set convert-meta off'
  bind 'set meta-flag on'
  bind 'set output-meta on'






#use_color=false
#
## Set colorful PS1 only on colorful terminals.
## dircolors --print-database uses its own built-in database
## instead of using /etc/DIR_COLORS.  Try to use the external file
## first to take advantage of user additions.  Use internal bash
## globbing instead of external grep binary.
#safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
#match_lhs=""
#[[ -f ~/.bash_color   ]] && match_lhs="${match_lhs}$(<~/.bash_color)"
#[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
#[[ -z ${match_lhs}    ]] \
#  && type -P dircolors >/dev/null \
#  && match_lhs=$(dircolors --print-database)
#[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true
#
#if ${use_color} ; then
#  # Enable colors for ls, etc.  Prefer ~/.bash_color #64489
#  if type -P dircolors >/dev/null ; then
#      if [[ -f ~/.bash_color ]] ; then
#          eval $(dircolors -b ~/.bash_color)
#      elif [[ -f /etc/DIR_COLORS ]] ; then
#          eval $(dircolors -b /etc/DIR_COLORS)
#      fi
#  fi
#
#  if [[ ${EUID} == 0 ]] ; then
#      PS1='\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] '
#  else
#      PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
#  fi
#
#  CLICOLOR="YES";    export CLICOLOR
#  LSCOLORS="ExGxFxdxCxDxDxhbadExEx";    export LSCOLORS
#  #alias ls='ls --color=auto'
#  #alias grep='grep --colour=auto'
#else
#  if [[ ${EUID} == 0 ]] ; then
#      # show root@ when we don't have colors
#      PS1='\u@\h \W \$ '
#  else
#      PS1='\u@\h \w \$ '
#  fi
#fi
#
## Try to keep environment pollution down, EPA loves us.
#unset use_color safe_term match_lhs
