" The base
set nocompatible | filetype plugin indent on | syntax on


" Variable
  let $PAGER = ''
  " OS
  let $os = 'unknown'
  if has('unix')
    let $os = 'unix'
    let s:tmp = system('uname -a')
    if -1 != match(s:tmp, '\candroid')
      let $os = 'termux'
    endif
  elseif has('win32') || has('win64')
    let $os = 'windows'
  endif

  " Os dependant
  if 'windows' == $os
    let $home = expand("C:/Users/tbf")
    let $alias = expand("H:/Program/Cmder/config/user-aliases.cmd")
    let $v = expand("$VIM/vimfiles")
  else
    let $home = "~"
    let $v = expand("$HOME/.vim")
  endif
  let $vim = $v

  " Alias
  " One letter
  let $h = expand($HOME)
  let $s = expand("$v/scripts") | let $script = $s
  let $w = expand("$h/wiki/wiki") | let $wiki = $w
  let $p = expand("$v/pack/bundle/opt") | let $pack = $p | let $opt = $p
  let $d = expand("$v/undo/dump") | let $dump = $d
  " RC
  let $alias = expand($v . "/dotfile/bash_aliases.sh")
  let $bashrc = expand($h . "/.bashrc")
  let $gitrc = expand($h . "/.gitconfig")
  let $vimrc = expand($h . "/.vimrc")
  let $tmuxrc = expand($h . "/.tmux.conf")
  let $done = expand($h . '/wiki/todo/done.md')
  " Vim
  let $auto = expand("$v/autoload")
  let $ft = expand("$v/ftplugin")


" Appearance
  " Preferences
    colorscheme dante
    set t_Co=256  " For airline and nice colors
    set formatoptions-=cro  " No auto comment
    set diffopt+=vertical
    set title                    " change the terminal's title, may not work
    set autoindent  " to have auto indentation when return line
    set laststatus=2 " for airline
    set wrapscan
    set conceallevel=3
    set nu
  " File format
    set encoding=utf-8
    set foldlevelstart=30 "the folding at opening
    set fileformat=unix
    set wrap
    set expandtab
    set shiftwidth=4
    set tabstop=4
  " Gui
    set guifont=Consolas:h14:cANSI:qDRAFT
    set guioptions-=T                  " Toolbar
    set guioptions-=m                  " Menumbar
  " Wildignore : Ignore these filenames during enhanced command line completion.
    set wildignore+=*.aux,*.out,*.toc,*.fdb_latexmk,*.pdf,*.fls,*.synctex.gz  " LaTeX intermediate files
    set wildignore+=*.jpg,*.bmp,*.gif,*.png  " binary images
    set wildignore+=*.luac  " Lua byte code
    set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest  " compiled object files
    set wildignore+=*.pyc  " Python byte code
    set wildignore+=*.spl  " compiled spelling word lists
    set wildignore+=*.sw?  " Vim swap files
    set wildignore+=.git/*  " Git shit
  " Search
    set ignorecase
    set smartcase
    set hlsearch      " highlight search terms
    set incsearch     " show search matches as you type
  " Cursor
    set cursorline  " Enable CursorLine
    " Default Colors for CursorLine
    highlight  CursorLine term=underline cterm=underline ctermbg=None ctermfg=None
    "Change Color when entering Insert Mode
    autocmd InsertEnter * highlight  CursorLine term=None cterm=None
    " Revert Color to default when leaving Insert Mode
    autocmd InsertLeave * highlight  CursorLine term=underline cterm=underline ctermbg=None ctermfg=None

  " Window
    set ruler
    set backspace=2
    " set shell=H:/Program/cmder-1.2.9/Cmder.exe
  " Viminfo rememebr last 10000 opened files
  let s:viminfo=join(map(split(&viminfo, ","), {arg -> (v:val[0] == "'" ? "'10000" : v:val)}), ",")
  exe("set viminfo=" . s:viminfo)


" Backup
  set nobackup                  " I may change that
  set noswapfile                " I will this if this is harmfull
  set nowritebackup
  set backupdir=~/.vim/backup// " the double // will put the backup with the full directory
  set directory=~/.vim/backup// " for the swap files
  set undolevels=10000         " use many levels of undo
  set history=10000    " After nocompatible

  if has('persistent_undo')
    set undodir=$v/undo
    set undofile 
  endif 


" Mouse Integration
  " Send more characters for redraws
  set mouse=a " Enable mouse use in all modes
  set ttyfast
  set ttymouse=xterm2


" Map
  let mapleader = ','
  tnoremap <Esc> <C-W>N

  " Maps for Package : On demand load
    " F8 : Colorscheme-switcher
    noremap <F8> :packadd misc<CR>:packadd colorscheme-switcher<CR><F8>
    map <ESC>[19;2~ <S-F8>
    " :NERDTree
    command! NERDTree :packadd nerdtree <BAR> NERDTree
    command! NERDTreeToggle :packadd nerdtree <BAR> NERDTreeToggle
    noremap <leader>n :NERDTreeToggle<CR>

  " Yank all buffer to system clipboard
    map <leader>y mtgg"+yG`t
    map <leader>p ggdG"+p

  " Indent < and >
    noremap > >>
    noremap < <<
    vnoremap > >gv
    vnoremap < <gv

  " select last paste in visual mode
    nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

  " Ctrlz (my plugin)
    nnoremap <silent> <expr> <leader>cd ctrlz#dadcd()
    nnoremap <expr> <c-z> ctrlz#ctrlz()

  " Perso maps normal
    nnoremap H :set cursorline! cursorcolumn!<CR>
    map xy :s/x/y/g<CR>
    map yx :s/y/x/g<CR>

  " Copy paste to from clipboard <- ctrl+p
    if $os != 'termux'
      " Disabled in termux for wheel
      nnoremap <C-y> "+y
      vnoremap <C-y> "+y
    endif
    nnoremap <C-p> "+p
    vnoremap <C-p> "+p

  " Command : %% to expand path in command mode
    cnoremap %% <C-R>=expand('%:p:h').'/'<CR>|

  " Insert mode begin, end <- c-a c-e shotcuts from gnome
    inoremap <C-A> <C-O>^
    inoremap <C-E> <C-O>g_
    "inoremap <C-K> <C-O>D

  " Esc <- jk or kj
    imap jk <Esc>
    imap kj <Esc>

  " C-Arrow on Ubuntu
    "Get Ctrl + ARROW KEYS,because if you don't do that, the <C-Up>  (ie crtl + up ) key is notreckognise
    map [1;5A <C-Up>
    map [1;5B <C-Down>
    map [1;5D <C-Left>
    map [1;5C <C-Right>

    map [1;2D <S-Left>
    map [1;2C <S-Right>
    cmap [1;2D <S-Left>
    cmap [1;2C <S-Right>

  " Save c-s and s
    noremap <C-S>      :update!<CR>
    vnoremap <C-S>    <C-C>:update!<CR>
    inoremap <C-S>    <C-O>:update!<CR>
    map s <C-S>

  " Commenting blocks of code with ,cc ,cu
    autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
    autocmd FileType sh,ruby,python   let b:comment_leader = '# '
    autocmd FileType conf,fstab       let b:comment_leader = '# '
    autocmd FileType tex              let b:comment_leader = '% '
    autocmd FileType mail             let b:comment_leader = '> '
    autocmd FileType vim              let b:comment_leader = '" '
    noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
    noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

  " Fold
    nnoremap <space> za
    vnoremap <space> zf
    map z1  :set foldlevel=0<CR><Esc>
    map z2  :set foldlevel=1<CR><Esc>
    map z3  :set foldlevel=2<CR><Esc>
    map z4  :set foldlevel=3<CR><Esc>
    map z5  :set foldlevel=4<CR><Esc>
    map z6  :set foldlevel=5<CR><Esc>
    map z7  :set foldlevel=6<CR><Esc>
    map z8  :set foldlevel=7<CR><Esc>
    map z9  :set foldlevel=8<CR><Esc>
    " And for azery
    map z& z1
    map zé z2
    map z" z3
    map z' z4
    map z( z5
    map z- z6
    map zè z7
    map z_ z8
    map zç z9

  " Tab
    noremap <C-n> :tabnew<CR>
    noremap g1 :1tabnext<CR><Esc>
    noremap g2 :2tabnext<CR><Esc>
    noremap g3 :3tabnext<CR><Esc>
    noremap g4 :4tabnext<CR><Esc>
    noremap g5 :5tabnext<CR><Esc>
    noremap g6 :6tabnext<CR><Esc>
    noremap g7 :7tabnext<CR><Esc>
    noremap g8 :8tabnext<CR><Esc>
    noremap g9 :9tabnext<CR><Esc>
    " And for azery
    map g& g1
    map gé g2
    map g" g3
    map g' g4
    map g( g5
    map g- g6
    map gè g7
    map g_ g8
    map gç g9

  " Edit special files
    function! Edit(file)
      try | execute 'buffer ' . a:file
      catch | execute 'edit ' . a:file
      endtry
    endfunction
    nnoremap <Leader>ea :call Edit($alias)<CR>
    nnoremap <Leader>eb :call Edit($bashrc)<CR>
    nnoremap <Leader>ed :call Edit('$h/wiki/todo/done.md')<CR>
    nnoremap <Leader>eg :call Edit($gitrc)<CR>
    nnoremap <Leader>et :call Edit($tmuxrc)<CR>
    nnoremap <Leader>ev :call Edit($vimrc)<CR>
    nnoremap <leader>s :update \| :so %<CR>:echo 'file sourced ' . expand('%')<CR>
    nnoremap <leader>b :write! $v/undo/<C-R>=strftime("%y-%m-%d")<CR>-%:t-bak.txt<CR>


" Command Man
  if exists(":Man") != 2
    com! -nargs=+ -complete=shellcmd M ru! ftplugin/man.vim | Man <args>
  else
    com! -nargs=+ -complete=shellcmd M Man <args>
  endif


" Folding
  highlight Folded ctermfg=DarkGreen ctermbg=Black
  set foldignore=
  set foldmethod=indent
  set foldcolumn=0  "the number of columns on the left to show the tree, default =0
  set foldlevelstart=30 "the folding at opening
  set shiftwidth=4  " the number of column taken into account for aa fold, IMPORTANT


" Filetype
  au BufNewFile,BufRead *.masm      setf masm
  au BufNewFile,BufRead *.asm       setf masm
  au BufNewFile,BufRead *.disarm    setf disarm
  au BufNewFile,BufRead *.kd        setf kd


" Plugin
  " Pymode
    let g:pymode_python = 'python3'
    let pymode_lint_checkers = ['pylint', 'pep8', 'pyflakes']
    " Column at 120
    autocmd FileType python set colorcolumn=120
    " let g:pymode_options_colorcolumn = 0 " Remove the red line
    let g:pymode_rope_goto_definition_cmd = 'e'
    " Auto open cwindow (quickfix) if any errors have been found
    let g:pymode_lint_cwindow = 0
    " Pylint ignore
      let s = ""
      let s .= ",E303"  " Too many blank lines
      let s .= ",E501"  " Line too long > 80
      let s =  ",E701"  " Multiple statement on one line
    " Do not perform mapping in ipython (it removes my previous <c-s>
    let g:ipy_perform_mappings = 0

  " ConqueDbg, a gdb plugging
    let g:ConqueGdb_Disable = 1
    let g:ConqueTerm_Color = 2         " 1: strip color after 200 lines, 2: always with color
    let g:ConqueTerm_CloseOnEnd = 1    " close conque when program ends running
    let g:ConqueTerm_StartMessages = 0 " display warning messages if conqueTerm is configured incorrectly
    let g:ConqueTerm_PyVersion = 3

  " Vdebug
    let g:vdebug_keymap = {
    \    "run" : "<F5>",
    \    "close" : "<F6>",
    \    "detach" : "<F7>",
    \    "run_to_cursor" : "<F8>",
    \    "set_breakpoint" : "<F9>",
    \    "step_over" : "<F10>",
    \    "step_into" : "<F11>",
    \    "step_out" : "<F12>",
    \    "get_context" : "<F2>",
    \    "eval_under_cursor" : "<F3>",
    \    "eval_visual" : "<Leader>e",
    \}

  " CtrlP
    " Cache
    let g:ctrlp_cache_dir = $home . '/.cache/ctrlp'
    " Use ag <- grep
    if executable('ag')
      let g:ctrl_user_command = 'ag %s -l --nocolor -g ""'
    endif
    " Ignore
    let g:ctrlp_cutom_ignore = {
      \ 'dir': '\.git$',
      \ 'file': ''
    \ }
    if $os != 'termux'
      " E like edit and closer to ctrl + <c-p> used to paste
      let g:ctrlp_map = '<C-E>'
    else
      " Because move up gives c-e
      let g:ctrlp_map = '<leader>ee'
    endif
    " Keep cache
    let g:ctrlp_clear_cache_on_exit = 0
    " Mixed to search in MRU, FIles, Buffers
    let g:ctrlp_cmd = 'CtrlPMixed'

  " Vim Translator
    ".vimrc
    " language code iso 639-1
    "? define key in visual-mode (optional)
    let g:goog_user_conf = { 'langpair': 'en|ru', 'cmd': 'node', 'v_key': 'T' }

  " AnsiEsc
    " au BufWinEnter *.a.txt AnsiEsc
    " au BufWinEnter *.a.txt set nowrap | echom "I saw an ansi file"
    " au ColorScheme * AnsiEsc!

  " Emacs Command line
    let g:EmacsCommandLineSearchCommandLineDisable = 1

  " Eclim
    let g:EclimCompletionMethod = 'omnifunc'

  " Vimtex
    " Disable overfull/underfull \hbox
    let g:vimtex_quickfix_latexlog = {
        \ 'overfull' : 0,
        \ 'underfull' : 0,
        \}

  " Ultisnip
    let g:UltiSnipsSnippetDirectories = [$v . '/template/my_snippets', $v . '/pack/bundle/opt/snippets/UltiSnips']
    let g:UltiSnipsExpandTrigger="<c-j>"
    let g:UltiSnipsUsePythonVersion = 3

  " Fugitive
    map <leader>gd :Gdiff<CR>
    map <leader>gb :Gblame<CR>
    map <leader>gs :Gstatus<CR>
    map <leader>gl :Glog<CR>
    map <leader>gc :Gcommit -m ""<C-b>
    map <leader>ga :Git add

  " YouCompleteMe
    " let g:ycm_global_ycm_extra_conf = "~/.vim/pack/bundle/opt/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"

  " Viewdoc
    let g:no_viewdoc_abbrev = 1
    let g:viewdoc_open = "e"

  " Table mode
    let g:table_mode_tableize_map = ',i'

  " Vimwiki
    " Wiki
    let g:vimwiki_list = [{
      \ 'path': $home . '/wiki/wiki',
      \ 'path_html': $home . '/wiki/wiki_html'
      \ }]
    " Todo
    let g:vimwiki_list += [{
      \ 'path': $home . '/wiki/todo',
      \ 'path_html': $home . '/wiki/todo_html'
      \ }]
    au BufNewFile,BufRead */todo      setf vimwiki
    " Map
    noremap <leader>ww :VimwikiIndex 1<CR>
    map <leader>tt :VimwikiIndex 2<CR>
    map <leader>t<leader>t :VimwikiDiaryIndex 2<CR>
    function! Windex(num)
      let l:nr = 1 + vimwiki#vars#get_bufferlocal('wiki_nr')
      if &ft!='vimwiki' || l:nr != a:num
        execute 'VimwikiIndex ' . a:num
      endif
    endfunction
    noremap <leader>wg :call Windex(1)<CR>:VimwikiGoto 
    noremap <leader>tg :call Windex(2)<CR>:VimwikiGoto 
    map <leader>k :packadd calendar <bar> Calendar<CR>
    " Option
    let g:vimwiki_table_reduce_last_col = 1
    let g:vimwiki_table_mappings = 0
    let g:vimwiki_table_auto_fmt = 1
    let g:vimwiki_automatic_nested_syntaxes = 1
    let g:vimwiki_syntax = 'markdown'
    let g:vimwiki_ext = '.md'
    let g:vimwiki_custom_wiki2html = $home . "/wiki/wiki/wiki2html.sh"
    let g:vimwiki_css_name = '/Css/include.css'

    packadd vimwiki " TODO remove and add autoload
    " Calendar
    let g:calendar_monday = 1

  " Ack to use ag
    let g:ackprg = 'ag --vimgrep --smart-case'
    cnoreabbrev ag Ack
    cnoreabbrev aG Ack
    cnoreabbrev Ag Ack
    cnoreabbrev AG Ack

  " Airline
    let g:airline#extensions#wordcount#enabled = 0
    let g:airline_section_a = ''
    let g:airline_section_b = ''
    let g:airline_section_x = ''
    let g:airline_section_y = ''
    let airline_section_z = '%3p%% %l/%L:%v'

    let g:airline_powerline_fonts = 1

    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

    " unicode symbols
    let g:airline_left_sep = '»'
    let g:airline_left_sep = '▶'
    let g:airline_right_sep = '«'
    let g:airline_right_sep = '◀'
    let g:airline_symbols.linenr = '␊'
    let g:airline_symbols.linenr = '␤'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.paste = 'Þ'
    let g:airline_symbols.paste = '∥'
    let g:airline_symbols.whitespace = 'Ξ'

    " airline symbols
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = ''


" Termux
  if 'termux' == $os
    autocmd CursorHold,CursorHoldI *  silent update
  endif


" PackAdd
  " Interface
  packadd fugitive
  packadd airline
  packadd ctrlp " 3ms
  " Map
  packadd surround
  packadd argtextobject " daa
  packadd indent-object " dai 
  " Snip
  packadd ultisnips " 3ms
  " Slow : reload on demand
  packadd emacscommandline
  " packadd unimpaired  " ]b (:bn) , ]<space> (add empty lines)


" Fastly (added)
  command! -nargs=0 -bar Helptags for p in glob('~/.vim/pack/bundle/opt/*', 1, 1) | exe 'packadd '.fnamemodify(p, ':t') | endfor | helptags ALL
  packadd perlomni
