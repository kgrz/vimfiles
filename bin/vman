#!/bin/sh
# Pager <- Vim: https://vim.fandom.com/wiki/Using_vim_as_a_man-page_viewer_under_Unix
# check size <- https://unix.stackexchange.com/questions/245064/what-is-the-best-way-to-pipe-the-output-of-a-command-through-a-pager-if-and-onl
# Require perl

unset PAGER

man_print() {
    while read line
    do
      echo "$line"
    done 
}
man_cat() { cat -; }

# man for manpages
man_page(){
    col -b -x |
    vim -R \
    -c 'set ft=man nomod nolist' -c 'map q :q<CR>' \
    -c 'map <SPACE> <C-D>' -c 'map b <C-U>' \
    -c 'set foldlevel=30'  \
    -c 'nmap K :Man <C-R>=expand(\\\"<cword>\\\")<CR><CR>' \
    -
}

# Man for git diff files
man_git() {
    vim -R \
    -c 'map q :q<CR>' \
    -c 'map <SPACE> <C-D>' -c 'map b <C-U>' \
    -c 'set foldlevel=30' \
    -c 'packadd ansiesc' -c 'AnsiEsc' \
    -
}

# Discrimintate size of stdin to pipe in (vim | less | cat)
man_select(){
    buffer=$(mktemp)
    rows="${LINES:=$(tput lines)}"
    cols="${COLUMNS:=$(tput cols)}"
    while true; do
        # Read
        IFS= read -r some_data
        eof=$?        # 1 if EOF, 0 if normal, successful read.

        # Pie
        printf "tin: print content\n" >> "$buffer"
        printf "%s" "$some_data" >> "$buffer"
        if [ "$eof" = 0 ]
        then
            printf "tin: print newline\n" >> "$buffer"
            printf "\n" >> "$buffer"
        fi

        # Check if size of buffer fits
        n_virt=$(fold -w"$cols" "$buffer" | wc -l)
        if [ "$n_virt" -lt "$rows" ]
        # If Small
        then
            if [ "$eof" != 0 ]
            then
                printf "tin: Cat\n" >> "$buffer"
                cat "$buffer"
            else
                # If not finished continue reading
                printf "tin: Continue\n" >> "$buffer"
                continue
            fi

        # Elif Large
        else
            # But with EOF so cat
            if [ "$eof" != 0 ]
            then
                printf "tin: printing with less\n" >> "$buffer"
                "${PAGER:="less"}" < "$buffer"
                # The above is equivalent to
                # cat "$buffer"   | "${PAGER:="less"}"
                # … but that’s a UUOC.
            # So work
            else
                printf "tin: printing for big\n" >> "$buffer"

                # Remove escape seq (IDEA can be improved, detect them and pass down)
                perl -pe 's/\x1b\[[0-9;]*[mG]//g' |
                # Concatenate buffer (size of the screen) and stdin (-)
                cat "$buffer" - |
                # Go in Vim
                "${PAGER:="man_vim"}"
            fi
        fi
        break
    done
    rm "$buffer"
}

man_select
