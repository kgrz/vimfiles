# Init
  # If not running interactively, don't do anything
  [ -z "$PS1" ] && return

  # Goto home
  if [ $PWD == / ] ; then cd ~ ; fi

  # Set OS
  uname=$(uname -a)
  uname=${uname,,}
  case $uname in
    *"android"*)
      export os="termux"
      export v="$HOME/.vim"
      ;;
    *"mingw"*)
      export os="windows"
      v=$(which gvim)  # Returns : /c/Users/chio/Work/Program/Gvim/vim81/gvim
      v=$(dirname $v)
      v=$(dirname $v)
      export v="$gvim_path/vimfiles"
      ;;
    *"linux"*)
      export os="unix"
      export v="$HOME/.vim"
      ;;
  esac

  # Execute tmux
  if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
    exec tmux
  fi

# Variable
  export b="$v/bin" ; export bin="$b"
  export p="$v/pack/bundle/opt/" ; export pack="$p"
  export t="$HOME/wiki/todo"
  export w="$HOME/wiki/wiki"


# Unknown command callback (tip: install bash-completion on tmux)
function command_not_found_handle {
  # If starting with g : git
  if [ ${1:0:1} == g ]; then
    git ${1:1} $2
  # If any shit, echo bash default errmsg
  else
    echo "bash(rc): $1: command not found"
  fi
}


# Preferences
  # Avoid c-s freezing
  stty -ixon

  # Vi as default `git commit`
  EDITOR='vim'
  # Check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # French characters
  stty cs8 -istrip -parenb
  bind 'set convert-meta off'
  bind 'set meta-flag on'
  bind 'set output-meta on'


# Prompt
  # Save history after each executed line
  export PROMPT_COMMAND+='history -a;'

  # PS1
  parse_git_branch() {
       git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
  }
  # CD (in title)
  export PS1="\033]0;\w\007"
  # CD (green)
  export PS1+="\[\033[32m\]\w"
  # Git Branch (yellow)
  export PS1+="\[\033[33m\]\$(parse_git_branch)\[\033[00m\]"
  # New line
  export PS1+='\n$ '


# History
  # append instead of overwrite
  shopt -s histappend
  export HISTSIZE=100000
  export HISTFILESIZE=100000
  export HISTCONTROL=ignoredups:ignorespace


# Head
  clear
  # Nowrap
  printf '\033[?7l'
  cat << '  EOF'
                             \  |  /
                              \_|_/
                  /|\     ____/   \____
                 / | \        \___/
                /  |  \       / | \
               /___|___\     /  |  \
              _____|_____
              \_________/
   ~~^^~~^~^~~^^~^^^^~~~~^~^~^~^^^^^^^
  
        |\   \\\\__     o
        | \_/    o_\    o
        >  _  (( <_  oo
        | / \__+___/
        |/     |/

  EOF
  # Reset wrap
  printf '\033[?7h'


# Include
  if [ -f $HOME/.bash_aliases.sh ]; then
      . $HOME/.bash_aliases.sh
  fi

  # if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
  #     . /etc/bash_completion
  # fi


# Path
  export PATH="$HOME/.vim/bin:$PATH"
  export PATH="$HOME/Bin:$PATH"
  export PATH="$PATH:$HOME/perl5/bin"
  export PATH="$PATH:$HOME/Software/Android/SDK/android-sdk-linux/platform-tools"
  export PATH="$PATH:$HOME/Software/Android/SDK/android-sdk-linux/tools"
  export PATH="$PATH:$HOME/Program/Eclipse/eclipse"
  export PATH=$PATH:/usr/local/cuda-10.0/bin
  export PATH=$PATH:~/Program/Metapixel/metapixel
  export PYTHONSTARTUP="$HOME/.ipython/profile_default/ipython.py"


# Perl
  export PERL5LIB="$HOME/Software/Perl/Lib:~/Program/Komodo/Komodo-PerlRemoteDebugging-8.0.2-78971-linux-x86_64"
  export PERL5LIB="$HOME/perl5/lib/perl5:${PERL5LIB}}"
  export PERL5DB="BEGIN { require q($PERL5LIB/perl5db.pl)}"
  export PERLDB_OPTS="RemotePort=localhost:9000"
  export DBGP_IDEKEY="whatever"


# Git
  # Completion
  if [ $os == 'unix' ] ; then 
    source /usr/share/bash-completion/completions/git # On desktop
  fi
  __git_complete g __git_main
  # Samsung j6
  if [ $os == 'termux' ] ; then
    export GIT_AUTHOR_NAME="tinmux"
    export GIT_AUTHOR_EMAIL=tin@termux.j6
  # Acer
  else
    export GIT_AUTHOR_NAME="tinmarino"
    export GIT_AUTHOR_EMAIL=tinmarino@gmail.com
  fi
  export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
  export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"


# Fast
  # tmux completion
  source $v/dotfile/tmux_completion.sh
  # man
  export PAGER="vman"
